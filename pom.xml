<!-- * Copyright (C) 2013 Sebastien Diot. * * Licensed under the Apache License,
	Version 2.0 (the "License"); * you may not use this file except in compliance
	with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0
	* * Unless required by applicable law or agreed to in writing, software *
	distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT
	WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the
	License for the specific language governing permissions and * limitations
	under the License. -->

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.blockwithme</groupId>
	<artifactId>oss-parent</artifactId>
	<version>0.0.4</version>
	<packaging>pom</packaging>
	<name>oss-parent</name>
	<description>Base configuration for my Maven projects.</description>
	<organization>
		<name>Sebastien Diot</name>
	</organization>
	<url>https://github.com/skunkiferous/oss-parent</url>
	<inceptionYear>2013</inceptionYear>

	<!-- To make our projects, and any project that use our projects as parents, "sonatype-compatible". -->
	<parent>
		<groupId>org.sonatype.oss</groupId>
		<artifactId>oss-parent</artifactId>
		<version>7</version>
	</parent>

	<scm>
		<connection>scm:git:git@github.com:skunkiferous/oss-parent.git</connection>
		<developerConnection>scm:git:git@github.com:skunkiferous/oss-parent.git</developerConnection>
		<url>git@github.com:skunkiferous/oss-parent.git</url>
		<tag>HEAD</tag>
	</scm>

	<developers>
		<developer>
			<id>skunkiferous</id>
			<name>Sebastien Diot</name>
			<email>s.diot@eurodata.de</email>
		</developer>
	</developers>

	<issueManagement>
		<system>Github Issues</system>
		<url>https://github.com/oehme/oss-parent/issues</url>
	</issueManagement>

	<licenses>
		<license>
			<name>Apache License 2.0</name>
			<distribution>repo</distribution>
			<url>http://opensource.org/licenses/Apache-2.0</url>
		</license>
	</licenses>

	<repositories>
		<!-- My own (temporary) repository, until I use something "official". -->
		<repository>
			<id>blockwithme-mvn-repo</id>
			<url>https://raw.github.com/skunkiferous/Maven/master</url>
		</repository>
		<repository>
			<id>com.springsource.repository.bundles.release</id>
			<name>SpringSource Enterprise Bundle Repository - SpringSource Bundle
			Releases</name>
			<url>http://repository.springsource.com/maven/bundles/release</url>
		</repository>
		<repository>
			<id>com.springsource.repository.bundles.external</id>
			<name>SpringSource Enterprise Bundle Repository - External Bundle Releases</name>
			<url>http://repository.springsource.com/maven/bundles/external</url>
		</repository>
		<repository>
			<id>xtend</id>
			<url>http://build.eclipse.org/common/xtend/maven/</url>
		</repository>
	</repositories>

	<pluginRepositories>
		<pluginRepository>
			<id>xtend</id>
			<url>http://build.eclipse.org/common/xtend/maven/</url>
		</pluginRepository>
	</pluginRepositories>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java-version>1.6</java-version>

		<!-- All the versions of the plugins -->
		<exec-maven-plugin-version>1.2.1</exec-maven-plugin-version>
		<lifecycle-mapping-version>1.0.0</lifecycle-mapping-version>
		<maven-bundle-plugin-version>2.4.0</maven-bundle-plugin-version>
		<maven-clean-plugin-version>2.5</maven-clean-plugin-version>
		<maven-compiler-plugin-version>3.0</maven-compiler-plugin-version>
		<maven-deploy-plugin-version>2.7</maven-deploy-plugin-version>
		<maven-enforcer-plugin-version>1.2</maven-enforcer-plugin-version>
		<maven-install-plugin-version>2.4</maven-install-plugin-version>
		<maven-jar-plugin-version>2.3.2</maven-jar-plugin-version>
		<maven-javadoc-plugin-version>2.8</maven-javadoc-plugin-version>
		<maven-site-plugin-version>3.3</maven-site-plugin-version>
		<maven-source-plugin-version>2.2.1</maven-source-plugin-version>
		<plexus-compiler-eclipse-plugin-version>2.3</plexus-compiler-eclipse-plugin-version>
		<xtend-maven-plugin-version>2.5.0</xtend-maven-plugin-version>

		<!-- All the versions of the dependencies -->
		<FuncGenerated012-dependency-version>1.2.0</FuncGenerated012-dependency-version>
		<guava-dependency-version>15.0</guava-dependency-version>
		<junit-dependency-version>4.10</junit-dependency-version>
		<org.eclipse.xtend.core-dependency-version>${xtend-maven-plugin-version}</org.eclipse.xtend.core-dependency-version>
		<org.eclipse.xtend.lib-dependency-version>${xtend-maven-plugin-version}</org.eclipse.xtend.lib-dependency-version>
		<slf4j-dependency-version>1.6</slf4j-dependency-version>
	</properties>

	<build>
		<!-- Since Eclipse does not relfect the configured directories, and use it's own convention, we need to force Maven to use the same. -->
		<sourceDirectory>${project.basedir}/src/main/java</sourceDirectory>
		<testSourceDirectory>${project.basedir}/src/test/java</testSourceDirectory>

		<resources>
			<!-- All projects should have a license and a README -->
			<resource>
				<directory>${basedir}</directory>
				<filtering>false</filtering>
				<includes>
					<include>LICENSE</include>
					<include>README.md</include>
				</includes>
			</resource>
		</resources>

		<pluginManagement>
			<plugins>
				<!-- To compile the Java source code -->
				<plugin>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>${maven-compiler-plugin-version}</version>
					<configuration>
						<source>${java-version}</source>
						<target>${java-version}</target>
					</configuration>
				</plugin>
				<!-- To clean the generated sources. -->
				<plugin>
					<artifactId>maven-clean-plugin</artifactId>
					<version>${maven-clean-plugin-version}</version>
					<configuration>
						<filesets>
							<fileset>
								<directory>${project.basedir}/src/main/xtend-gen</directory>
								<followSymlinks>false</followSymlinks>
							</fileset>
							<fileset>
								<directory>${project.basedir}/src/test/xtend-gen</directory>
								<followSymlinks>false</followSymlinks>
							</fileset>
							<fileset>
								<directory>${project.basedir}/target</directory>
								<followSymlinks>false</followSymlinks>
							</fileset>
						</filesets>
					</configuration>
					<executions>
						<execution>
							<id>auto-clean</id>
							<phase>initialize</phase>
							<goals>
								<goal>clean</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<!-- To "execute some task" (generate sources in some projects) -->
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>exec-maven-plugin</artifactId>
					<version>${exec-maven-plugin-version}</version>
				</plugin>
				<!-- To generate OSGi bundle -->
				<plugin>
					<groupId>org.apache.felix</groupId>
					<artifactId>maven-bundle-plugin</artifactId>
					<executions>
						<execution>
							<id>bundle-manifest</id>
							<phase>process-classes</phase>
							<goals>
								<goal>manifest</goal>
							</goals>
						</execution>
					</executions>
					<version>${maven-bundle-plugin-version}</version>
					<extensions>true</extensions>
					<configuration>
						<manifestLocation>${project.basedir}/META-INF</manifestLocation>
						<instructions>
							<!-- Most <Bundle-*> are computed correctly by default -->
							<Export-Package>{local-packages}</Export-Package>
						</instructions>
					</configuration>
				</plugin>
				<!-- To generate code jar -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-jar-plugin</artifactId>
					<version>${maven-jar-plugin-version}</version>
					<configuration>
						<archive>
							<manifestFile>${project.basedir}/META-INF/MANIFEST.MF</manifestFile>
						</archive>
					</configuration>
				</plugin>
				<!-- To generate source jar -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-source-plugin</artifactId>
					<version>${maven-source-plugin-version}</version>
					<executions>
						<execution>
							<id>attach-sources</id>
							<phase>post-integration-test</phase>
							<goals>
								<goal>jar</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<!-- To generate javadoc jar -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-javadoc-plugin</artifactId>
					<version>${maven-javadoc-plugin-version}</version>
					<executions>
						<execution>
							<id>attach-docs</id>
							<phase>post-integration-test</phase>
							<goals>
								<goal>jar</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<!-- The install-in-repo plugin -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-install-plugin</artifactId>
					<version>${maven-install-plugin-version}</version>
				</plugin>
				<!-- Generate a site for the project; includes the project's reports. -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-site-plugin</artifactId>
					<version>${maven-site-plugin-version}</version>
				</plugin>
				<!-- The deployment plugin -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-deploy-plugin</artifactId>
					<version>${maven-deploy-plugin-version}</version>
				</plugin>
				<!-- To compile the Xtend files into Java code files -->
				<plugin>
					<groupId>org.eclipse.xtend</groupId>
					<artifactId>xtend-maven-plugin</artifactId>
					<version>${xtend-maven-plugin-version}</version>
					<!-- To make sure the Xtend generate sources go in the same directory in Eclipse and Maven -->
					<executions>
						<execution>
							<goals>
								<goal>compile</goal>
								<goal>testCompile</goal>
								<goal>xtend-install-debug-info</goal>
								<goal>xtend-test-install-debug-info</goal>
							</goals>
							<configuration>
								<outputDirectory>src/main/xtend-gen</outputDirectory>
								<testOutputDirectory>src/test/xtend-gen</testOutputDirectory>
							</configuration>
						</execution>
					</executions>
				</plugin>
				<!-- The enforcer plugin -->
                <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-enforcer-plugin</artifactId>
                        <version>${maven-enforcer-plugin-version}</version>
                        <executions>
                                <execution>
                                        <id>enforce-best-practices</id>
                                        <goals>
                                                <goal>enforce</goal>
                                        </goals>
                                        <configuration>
                                                <rules>
                                                        <requireMavenVersion>
                                                                <version>3.0.4</version>
                                                        </requireMavenVersion>
                                                        <requireUpperBoundDeps/>
                                                        <requirePluginVersions/>
                                                </rules>
                                        </configuration>
                                </execution>
                        </executions>
                </plugin>
				<!--This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven build itself.-->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>${lifecycle-mapping-version}</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.codehaus.mojo
										</groupId>
										<artifactId>
											exec-maven-plugin
										</artifactId>
										<versionRange>
											[1.1.1,)
										</versionRange>
										<goals>
											<goal>java</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.apache.maven.plugins
										</groupId>
										<artifactId>
											maven-clean-plugin
										</artifactId>
										<versionRange>
											[2.5,)
										</versionRange>
										<goals>
											<goal>clean</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>

	<!-- If I use this, then for some strange reason, the jars of the children projects are not "installed" anymore -->
<!--
        <plugins>
                <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-source-plugin</artifactId>
                </plugin>
                <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-javadoc-plugin</artifactId>
                </plugin>
                <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-compiler-plugin</artifactId>
                </plugin>
                <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-enforcer-plugin</artifactId>
                </plugin>
        </plugins>
-->

	</build>

	<dependencyManagement>
		<dependencies>
			<!-- jUnit -->
			<dependency>
				<groupId>org.junit</groupId>
				<artifactId>com.springsource.org.junit</artifactId>
				<version>${junit-dependency-version}</version>
				<scope>test</scope>
			</dependency>
			<!-- slf4j API -->
			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>slf4j-api</artifactId>
				<version>${slf4j-dependency-version}</version>
			</dependency>
			<!-- slf4j impl: Only for tests! -->
			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>slf4j-simple</artifactId>
				<version>${slf4j-dependency-version}</version>
				<scope>test</scope>
			</dependency>
			<!-- My own Functors -->
			<dependency>
				<groupId>com.blockwithme</groupId>
				<artifactId>FuncGenerated012</artifactId>
				<version>${FuncGenerated012-dependency-version}</version>
			</dependency>
			<!-- Xtend -->
			<dependency>
				<groupId>org.eclipse.xtend</groupId>
				<artifactId>org.eclipse.xtend.lib</artifactId>
				<version>${org.eclipse.xtend.lib-dependency-version}</version>
			</dependency>
			<dependency>
				<groupId>org.eclipse.xtend</groupId>
				<artifactId>org.eclipse.xtend.core</artifactId>
				<version>${org.eclipse.xtend.core-dependency-version}</version>
			</dependency>
			<!-- Guava -->
			<dependency>
				<groupId>com.google.guava</groupId>
				<artifactId>guava</artifactId>
				<version>${guava-dependency-version}</version>
			</dependency>
		</dependencies>
	</dependencyManagement>
</project>

